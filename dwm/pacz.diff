--- dwm.c	2010-03-28 20:16:23.256672080 +0200
+++ dwm.c.org	2010-03-28 20:29:02.653796919 +0200
@@ -36,10 +36,6 @@
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
 #include <X11/Xutil.h>
-#include <X11/Xft/Xft.h>
-#include <pango/pango.h>
-#include <pango/pangoxft.h>
-#include <pango/pango-font.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
@@ -50,21 +46,14 @@
 #define INRECT(X,Y,RX,RY,RW,RH) ((X) >= (RX) && (X) < (RX) + (RW) && (Y) >= (RY) && (Y) < (RY) + (RH))
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
-#ifndef MAX
-#define MAX(A, B)        ((A) > (B) ? (A) : (B))
-#endif
-#ifndef MIN
+#define MAX(A, B)               ((A) > (B) ? (A) : (B))
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
-#endif
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (textnw(X, strlen(X)) + dc.font.height)
 
-/* BUG: This is DAMN stupid! */
-#define TAGNUM			9
-
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
 enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
@@ -72,7 +61,6 @@
 enum { WMProtocols, WMDelete, WMState, WMLast };        /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast };             /* clicks */
-enum { AttNormal, AttAbove, AttAside, AttAsLast };        /* Attach modes */
 
 typedef union {
 	int i;
@@ -111,19 +99,12 @@
 	unsigned long sel[ColLast];
 	Drawable drawable;
 	GC gc;
-
-    XftColor  xftnorm[ColLast];
-    XftColor  xftsel[ColLast];
-    XftDraw  *xftdrawable;
-
-    PangoContext *pgc;
-    PangoLayout  *plo;
-    PangoFontDescription *pfd;
-
 	struct {
 		int ascent;
 		int descent;
 		int height;
+		XFontSet set;
+		XFontStruct *xfont;
 	} font;
 } DC; /* draw context */
 
@@ -142,8 +123,6 @@
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
-	double mfacts[TAGNUM + 1];
-	int attachmode;
 	int num;
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
@@ -152,16 +131,10 @@
 	unsigned int sellt;
 	unsigned int tagset[2];
 	Bool showbar;
-	Bool showbars[TAGNUM + 1];
 	Bool topbar;
 	Client *clients;
 	Client *sel;
 	Client *stack;
-	int attachmodes[TAGNUM + 1];
-	Client *lastfocus[TAGNUM + 1];
-	const Layout *lts[TAGNUM + 1];
-	int curtag;
-	int prevtag;
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
@@ -181,11 +154,7 @@
 static Bool applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact);
 static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
-static void attachaslast(Client *c);
-static void attachaside(Client *c);
-static void attachabove(Client *c);
 static void attach(Client *c);
-static void setattachmode(const Arg *arg);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -211,8 +180,7 @@
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
-static void focustoggle(const Arg *arg);
-//static unsigned long getcolor(const char *colstr);//
+static unsigned long getcolor(const char *colstr);
 static Bool getrootptr(int *x, int *y);
 static long getstate(Window w);
 static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
@@ -433,62 +401,9 @@
 }
 
 void
-attachaslast(Client *c) {
-	if(!c->mon->clients) {
-		c->next = c->mon->clients;
-		c->mon->clients = c;
-		return;
-	}
-	Client *at;
-	for(at = c->mon->clients; at->next; at = at->next);
-	c->next = at->next;
-	at->next = c;
-}
-
-void
-attachaside(Client *c) {
-	Client *at = nexttiled(c->mon->clients);
-	if(c->mon->sel == NULL || c->mon->sel->isfloating || !at) {
-		c->next = c->mon->clients;
-		c->mon->clients = c;
-		return;
-	}
-	c->next = at->next;
-	at->next = c;
-}
-
-void
-attachabove(Client *c) {
-	if(c->mon->sel == NULL || c->mon->sel == c->mon->clients || c->mon->sel->isfloating) {
-		attach(c);
-		c->next = c->mon->clients;
-		c->mon->clients = c;
-	}
-
-	Client *at;
-	for (at = c->mon->clients; at->next != c->mon->sel; at = at->next);
-	c->next = at->next;
-	at->next = c;
-}
-
-void
 attach(Client *c) {
-	// TODO: use function pointer, damn!
-	if(selmon->attachmode==AttAbove)
-		attachabove(c);
-	else if(selmon->attachmode==AttAside)
-		attachaside(c);
-	else if(selmon->attachmode==AttAsLast)
-		attachaslast(c);
-	else {
-		c->next = c->mon->clients;
-		c->mon->clients = c;
-	}
-}
-
-void setattachmode(const Arg *arg) {
-	if(!arg) return;
-	selmon->attachmode = arg->i;
+	c->next = c->mon->clients;
+	c->mon->clients = c;
 }
 
 void
@@ -562,6 +477,10 @@
 	for(m = mons; m; m = m->next)
 		while(m->stack)
 			unmanage(m->stack, False);
+	if(dc.font.set)
+		XFreeFontSet(dpy, dc.font.set);
+	else
+		XFreeFont(dpy, dc.font.xfont);
 	XUngrabKey(dpy, AnyKey, AnyModifier, root);
 	XFreePixmap(dpy, dc.drawable);
 	XFreeGC(dpy, dc.gc);
@@ -691,7 +610,7 @@
 	if(!(m = (Monitor *)calloc(1, sizeof(Monitor))))
 		die("fatal: could not malloc() %u bytes\n", sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
-	m->mfact = m->mfacts[0];
+	m->mfact = mfact;
 	m->showbar = showbar;
 	m->topbar = topbar;
 	m->lt[0] = &layouts[0];
@@ -848,8 +767,8 @@
 		return;
 	olen = strlen(text);
 	h = dc.font.ascent + dc.font.descent;
-	y = dc.y;
-    x = dc.x + (h / 2);
+	y = dc.y + (dc.h / 2) - (h / 2) + dc.font.ascent;
+	x = dc.x + (h / 2);
 	/* shorten text if necessary */
 	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
 	if(!len)
@@ -857,10 +776,11 @@
 	memcpy(buf, text, len);
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');
-    pango_layout_set_text(dc.plo, text, len);
-    pango_xft_render_layout(dc.xftdrawable,
-            (col==dc.norm?dc.xftnorm:dc.xftsel)+(invert?ColBG:ColFG), dc.plo, x * PANGO_SCALE, y * 
-            PANGO_SCALE);
+	XSetForeground(dpy, dc.gc, col[invert ? ColBG : ColFG]);
+	if(dc.font.set)
+		XmbDrawString(dpy, dc.drawable, dc.font.set, dc.gc, x, y, buf, len);
+	else
+		XDrawString(dpy, dc.drawable, dc.gc, x, y, buf, len);
 }
 
 void
@@ -959,25 +879,14 @@
 	}
 }
 
-void
-focustoggle(const Arg *arg) {
-	Client *c;
-	if(!(c = selmon->sel))
-		return;
-        if(c && selmon->lastfocus[selmon->curtag]) {
-		focus(selmon->lastfocus[selmon->curtag]);
-		restack(c->mon);
-	}
-}
-
 unsigned long
-getcolor(const char *colstr, XftColor *color) {
-    Colormap cmap = DefaultColormap(dpy, screen);
-    Visual *vis = DefaultVisual(dpy, screen);
+getcolor(const char *colstr) {
+	Colormap cmap = DefaultColormap(dpy, screen);
+	XColor color;
 
-	if(!XftColorAllocName(dpy,vis,cmap,colstr, color))
-        die("error, cannot allocate color '%s'\n", colstr);
-    return color->pixel;
+	if(!XAllocNamedColor(dpy, cmap, colstr, &color, &color))
+		die("error, cannot allocate color '%s'\n", colstr);
+	return color.pixel;
 }
 
 Bool
@@ -1074,21 +983,38 @@
 
 void
 initfont(const char *fontstr) {
-    PangoFontMetrics *metrics;
-
-	dc.pgc = pango_xft_get_context(dpy, screen);
-    dc.pfd = pango_font_description_from_string(fontstr);
-
-    metrics = pango_context_get_metrics(dc.pgc, dc.pfd,
-             pango_language_from_string(setlocale(LC_CTYPE, "")));
-    dc.font.ascent = pango_font_metrics_get_ascent(metrics) / PANGO_SCALE;
-    dc.font.descent = pango_font_metrics_get_descent(metrics) / PANGO_SCALE;
+	char *def, **missing;
+	int i, n;
 
-    pango_font_metrics_unref(metrics);
+	missing = NULL;
+	dc.font.set = XCreateFontSet(dpy, fontstr, &missing, &n, &def);
+	if(missing) {
+		while(n--)
+			fprintf(stderr, "dwm: missing fontset: %s\n", missing[n]);
+		XFreeStringList(missing);
+	}
+	if(dc.font.set) {
+		XFontSetExtents *font_extents;
+		XFontStruct **xfonts;
+		char **font_names;
 
-    dc.plo = pango_layout_new(dc.pgc);
-    pango_layout_set_font_description(dc.plo, dc.pfd);
-    dc.font.height = dc.font.ascent + dc.font.descent;
+		dc.font.ascent = dc.font.descent = 0;
+		font_extents = XExtentsOfFontSet(dc.font.set);
+		n = XFontsOfFontSet(dc.font.set, &xfonts, &font_names);
+		for(i = 0, dc.font.ascent = 0, dc.font.descent = 0; i < n; i++) {
+			dc.font.ascent = MAX(dc.font.ascent, (*xfonts)->ascent);
+			dc.font.descent = MAX(dc.font.descent,(*xfonts)->descent);
+			xfonts++;
+		}
+	}
+	else {
+		if(!(dc.font.xfont = XLoadQueryFont(dpy, fontstr))
+		&& !(dc.font.xfont = XLoadQueryFont(dpy, "fixed")))
+			die("error, cannot load font: '%s'\n", fontstr);
+		dc.font.ascent = dc.font.xfont->ascent;
+		dc.font.descent = dc.font.xfont->descent;
+	}
+	dc.font.height = dc.font.ascent + dc.font.descent;
 }
 
 Bool
@@ -1524,7 +1450,7 @@
 	if(!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
 		selmon->sellt ^= 1;
 	if(arg && arg->v)
-		selmon->lt[selmon->sellt] = selmon->lts[selmon->curtag] = (Layout *)arg->v;
+		selmon->lt[selmon->sellt] = (Layout *)arg->v;
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if(selmon->sel)
 		arrange(selmon);
@@ -1542,15 +1468,13 @@
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if(f < 0.1 || f > 0.9)
 		return;
-	selmon->mfact = selmon->mfacts[selmon->curtag] = f;
+	selmon->mfact = f;
 	arrange(selmon);
 }
 
 void
 setup(void) {
 	XSetWindowAttributes wa;
-	Monitor *m;
-	unsigned int i;
 
 	/* clean up any zombies immediately */
 	sigchld(0);
@@ -1573,60 +1497,19 @@
 	cursor[CurNormal] = XCreateFontCursor(dpy, XC_left_ptr);
 	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
 	cursor[CurMove] = XCreateFontCursor(dpy, XC_fleur);
-	
-    /* init appearance */
-	    dc.norm[ColBorder] = getcolor(normbordercolor, dc.xftnorm+ColBorder);
-        dc.norm[ColBG] = getcolor(normbgcolor, dc.xftnorm+ColBG);
-        dc.norm[ColFG] = getcolor(normfgcolor, dc.xftnorm+ColFG);
-        dc.sel[ColBorder] = getcolor(selbordercolor, dc.xftsel+ColBorder);
-        dc.sel[ColBG] = getcolor(selbgcolor, dc.xftsel+ColBG);
-        dc.sel[ColFG] = getcolor(selfgcolor, dc.xftsel+ColFG);
-
-
-    dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
+	/* init appearance */
+	dc.norm[ColBorder] = getcolor(normbordercolor);
+	dc.norm[ColBG] = getcolor(normbgcolor);
+	dc.norm[ColFG] = getcolor(normfgcolor);
+	dc.sel[ColBorder] = getcolor(selbordercolor);
+	dc.sel[ColBG] = getcolor(selbgcolor);
+	dc.sel[ColFG] = getcolor(selfgcolor);
+	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
-	    dc.xftdrawable = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy,screen),
-                DefaultColormap(dpy,screen));
-        if(!dc.xftdrawable)
-            printf("error, cannot create drawable\n");
-
-    /* init tags */
-	for(m = mons; m; m = m->next)
-		m->curtag = m->prevtag = 1;
-	/* init mfacts */
-	for(m = mons; m; m = m->next) {
-		m->mfact = m->mfacts[0] = tagmwfact[0];
-		for(i=1; i < LENGTH(tags) + 1 ; i++) {
-			m->mfacts[i] = tagmwfact[i-1];
-		}
-	}
-	/* init layouts */
-	for(m = mons; m; m = m->next) {
-		m->lt[0] = m->lts[0] = &layouts[taglayout[0]];
-		for(i=1; i < LENGTH(tags) + 1; i++) {
-			m->lts[i] = &layouts[taglayout[i-1]];
-		}
-	}
-	/* init attachmodes */
-	for(m = mons; m; m = m->next) {
-		m->attachmode = m->attachmodes[0] = tagattachmode[0];
-		for(i=1; i < LENGTH(tags) + 1; i++) {
-			m->attachmodes[i] = tagattachmode[i-1];
-		}
-	}
+	if(!dc.font.set)
+		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
 	/* init bars */
-	for(m = mons; m; m = m->next) {
-		for(i=0; i < LENGTH(tags) + 1; i++) {
-			m->showbars[i] = m->showbar;
-		}
-	}
-	/* init lastfocus */
-	for(m = mons; m; m = m->next) {
-		for(i=0; i < LENGTH(tags) + 1; i++) {
-			m->lastfocus[i]=NULL;
-		}
-	}
 	updatebars();
 	updatestatus();
 	/* EWMH support per view */
@@ -1696,10 +1579,13 @@
 
 int
 textnw(const char *text, unsigned int len) {
-    PangoRectangle r;
-    pango_layout_set_text(dc.plo, text, len);
-    pango_layout_get_extents(dc.plo, &r, 0);
-    return r.width / PANGO_SCALE;
+	XRectangle r;
+
+	if(dc.font.set) {
+		XmbTextExtents(dc.font.set, text, len, NULL, &r);
+		return r.width;
+	}
+	return XTextWidth(dc.font.xfont, text, len);
 }
 
 void
@@ -1734,7 +1620,7 @@
 
 void
 togglebar(const Arg *arg) {
-	selmon->showbar = selmon->showbars[selmon->curtag] = !selmon->showbar;
+	selmon->showbar = !selmon->showbar;
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
 	arrange(selmon);
@@ -1754,27 +1640,12 @@
 void
 toggletag(const Arg *arg) {
 	unsigned int newtags;
-	unsigned int i;
 
 	if(!selmon->sel)
 		return;
 	newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
 	if(newtags) {
 		selmon->sel->tags = newtags;
-		if(newtags == ~0) {
-			selmon->prevtag = selmon->curtag;
-			selmon->curtag = 0;
-		}
-		if(!(newtags & 1 << (selmon->curtag - 1))) {
-			selmon->prevtag = selmon->curtag;
-			for (i=0; !(newtags & 1 << i); i++);
-			selmon->curtag = i + 1;
-		}
-		selmon->sel->tags = newtags;
-		selmon->lt[selmon->sellt] = selmon->lts[selmon->curtag];
-		selmon->mfact = selmon->mfacts[selmon->curtag];
-		if (selmon->showbar != selmon->showbars[selmon->curtag])
-			togglebar(NULL);
 		arrange(selmon);
 	}
 }
@@ -2041,29 +1912,11 @@
 
 void
 view(const Arg *arg) {
-	unsigned int i;
-
 	if((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
-	if(arg->ui & TAGMASK) {
+	if(arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
-		selmon->prevtag = selmon->curtag;
-		if(arg->ui == ~0)
-			selmon->curtag = 0;
-		else {
-			for (i=0; !(arg->ui & 1 << i); i++);
-			selmon->curtag = i + 1;
-		}
-	} else {
-		selmon->prevtag= selmon->curtag ^ selmon->prevtag;
-		selmon->curtag^= selmon->prevtag;
-		selmon->prevtag= selmon->curtag ^ selmon->prevtag;
-	}
-	selmon->lt[selmon->sellt]= selmon->lts[selmon->curtag];
-	selmon->mfact = selmon->mfacts[selmon->curtag];
-	if(selmon->showbar != selmon->showbars[selmon->curtag])
-		togglebar(NULL);
 	arrange(selmon);
 }
 
